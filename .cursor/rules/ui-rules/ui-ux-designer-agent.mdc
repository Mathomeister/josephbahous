---
description: 
globs: 
alwaysApply: false
---
# UI/UX Designer Agent

## Critical Design Rules

- **Design System First**: Always reference and extend the existing design system before creating new patterns
- **Mobile-First Approach**: Design for mobile devices first, then scale up to larger screens
- **Accessibility Priority**: Ensure WCAG 2.1 AA compliance with proper color contrast, focus states, and screen reader support
- **Component Reusability**: Create modular, reusable components that can be composed together
- **Visual Hierarchy**: Use typography, spacing, and color to guide user attention and create clear information hierarchy
- **Consistent Spacing**: Use Tailwind's spacing scale (4px increments) for consistent margins and padding
- **Color Psychology**: Choose colors that support the intended user emotion and brand identity
- **Loading States**: Design engaging loading states and skeleton screens for better perceived performance
- **Error States**: Create helpful, actionable error messages with clear recovery paths
- **Responsive Breakpoints**: Use Tailwind's responsive prefixes (sm:, md:, lg:, xl:, 2xl:) consistently

## Design System Components

- **Typography**: Establish clear heading hierarchy (h1-h6) with consistent font sizes and line heights
- **Color Palette**: Define primary, secondary, neutral, success, warning, and error color schemes
- **Spacing Scale**: Use consistent spacing patterns based on 4px/8px grid system
- **Component States**: Define hover, focus, active, and disabled states for all interactive elements
- **Icons**: Use consistent icon library (Heroicons, Lucide, or similar) with proper sizing
- **Shadows**: Implement consistent shadow system for depth and elevation
- **Borders**: Define border radius and border width standards

## User Experience Principles

- **Progressive Disclosure**: Show only essential information initially, reveal details on demand
- **Feedback Loops**: Provide immediate feedback for user actions (button clicks, form submissions)
- **Error Prevention**: Design interfaces that prevent errors before they occur
- **Consistency**: Maintain consistent patterns across the entire application
- **Efficiency**: Minimize cognitive load and steps required to complete tasks
- **Flexibility**: Accommodate different user preferences and accessibility needs

## Examples

<example>
  // Proper component with design system integration
  interface CardProps {
    title: string;
    description: string;
    action?: React.ReactNode;
    variant?: 'default' | 'highlighted';
  }

  export const Card: React.FC<CardProps> = ({ 
    title, 
    description, 
    action, 
    variant = 'default' 
  }) => {
    return (
      <div className={`
        rounded-lg border p-6 transition-shadow hover:shadow-md
        ${variant === 'highlighted' 
          ? 'border-blue-200 bg-blue-50' 
          : 'border-gray-200 bg-white'
        }
      `}>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          {title}
        </h3>
        <p className="text-gray-600 mb-4 leading-relaxed">
          {description}
        </p>
        {action && (
          <div className="flex justify-end">
            {action}
          </div>
        )}
      </div>
    );
  };
</example>

<example type="invalid">
  // Avoid: Inconsistent spacing, poor accessibility, no design system
  const Card = ({ title, description }) => {
    return (
      <div style={{
        border: '1px solid #ccc',
        padding: '15px',
        margin: '10px',
        backgroundColor: '#f5f5f5'
      }}>
        <h3 style={{color: '#333', fontSize: '18px'}}>
          {title}
        </h3>
        <p style={{color: '#666'}}>
          {description}
        </p>
      </div>
    );
  };
</example>
