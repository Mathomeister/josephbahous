---
description: 
globs: 
alwaysApply: false
---
# Backend Developer Agent

## Critical Backend Rules

- **API Design**: Follow RESTful principles or GraphQL best practices for consistent API design
- **Input Validation**: Validate and sanitize all user inputs to prevent security vulnerabilities
- **Error Handling**: Implement comprehensive error handling with proper HTTP status codes
- **Authentication**: Use secure authentication methods (JWT, OAuth, session-based) with proper token management
- **Authorization**: Implement role-based access control (RBAC) for resource protection
- **Database Security**: Use parameterized queries to prevent SQL injection attacks
- **Rate Limiting**: Implement rate limiting to prevent abuse and ensure API stability
- **Logging**: Implement structured logging for debugging and monitoring
- **Environment Variables**: Use environment variables for configuration and secrets management
- **Data Validation**: Use schema validation libraries (Zod, Joi) for request/response validation

## API Development Standards

- **HTTP Methods**: Use appropriate HTTP methods (GET, POST, PUT, PATCH, DELETE)
- **Status Codes**: Return proper HTTP status codes (200, 201, 400, 401, 403, 404, 500)
- **Response Format**: Maintain consistent JSON response structure across all endpoints
- **Pagination**: Implement pagination for list endpoints with limit/offset or cursor-based pagination
- **Versioning**: Version APIs using URL versioning (/api/v1/) or header versioning
- **Documentation**: Document APIs using OpenAPI/Swagger specifications
- **CORS**: Configure CORS properly for cross-origin requests
- **Content-Type**: Set appropriate Content-Type headers for responses

## Database Best Practices

- **Schema Design**: Design normalized database schemas with proper relationships
- **Indexing**: Create appropriate database indexes for query optimization
- **Migrations**: Use database migrations for schema changes and version control
- **Connection Pooling**: Implement connection pooling for database efficiency
- **Transactions**: Use database transactions for data consistency
- **Backup Strategy**: Implement regular database backup and recovery procedures
- **Query Optimization**: Optimize database queries to prevent N+1 problems
- **Data Integrity**: Implement proper constraints and validation at the database level

## Security Implementation

- **Password Hashing**: Use bcrypt or similar for password hashing with proper salt rounds
- **JWT Security**: Implement secure JWT with proper expiration and refresh token strategy
- **HTTPS Only**: Enforce HTTPS for all API communications
- **Input Sanitization**: Sanitize inputs to prevent XSS and injection attacks
- **Rate Limiting**: Implement rate limiting per IP/user to prevent abuse
- **Security Headers**: Set security headers (CORS, CSP, HSTS, X-Frame-Options)
- **Audit Logging**: Log security-relevant events for monitoring and compliance

## Examples

<example>
  // Proper API endpoint with validation and error handling
  import { z } from 'zod';
  import bcrypt from 'bcrypt';
  import jwt from 'jsonwebtoken';

  const CreateUserSchema = z.object({
    email: z.string().email(),
    password: z.string().min(8),
    name: z.string().min(2).max(50)
  });

  export async function createUser(req: Request, res: Response) {
    try {
      // Validate input
      const validatedData = CreateUserSchema.parse(req.body);
      
      // Check if user already exists
      const existingUser = await User.findOne({ email: validatedData.email });
      if (existingUser) {
        return res.status(409).json({
          error: 'User already exists',
          code: 'USER_EXISTS'
        });
      }

      // Hash password
      const saltRounds = 12;
      const hashedPassword = await bcrypt.hash(validatedData.password, saltRounds);

      // Create user
      const user = await User.create({
        email: validatedData.email,
        password: hashedPassword,
        name: validatedData.name
      });

      // Generate JWT
      const token = jwt.sign(
        { userId: user.id, email: user.email },
        process.env.JWT_SECRET!,
        { expiresIn: '24h' }
      );

      // Return success response (exclude password)
      res.status(201).json({
        message: 'User created successfully',
        data: {
          id: user.id,
          email: user.email,
          name: user.name,
          createdAt: user.createdAt
        },
        token
      });

    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({
          error: 'Validation failed',
          details: error.errors
        });
      }

      console.error('User creation error:', error);
      res.status(500).json({
        error: 'Internal server error',
        code: 'INTERNAL_ERROR'
      });
    }
  }
</example>

<example type="invalid">
  // Avoid: No validation, plain text passwords, poor error handling
  app.post('/users', async (req, res) => {
    const user = await User.create({
      email: req.body.email,
      password: req.body.password, // Plain text password!
      name: req.body.name
    });
    
    res.json(user); // Exposes password in response!
  });
</example>
