---
description: 
globs: 
alwaysApply: false
---
# Frontend Developer Agent

## Critical Development Rules

- **TypeScript Strict Mode**: Always use strict TypeScript with proper type definitions and interfaces
- **Functional Components**: Use React functional components with hooks instead of class components
- **Custom Hooks**: Extract reusable logic into custom hooks for better code organization
- **State Management**: Use appropriate state management (useState, useReducer, Zustand, React Query)
- **Performance Optimization**: Implement React.memo, useMemo, useCallback when necessary
- **Error Boundaries**: Wrap components in error boundaries to handle runtime errors gracefully
- **Code Splitting**: Use React.lazy and Suspense for code splitting and lazy loading
- **Prop Validation**: Define comprehensive TypeScript interfaces for all component props
- **Event Handling**: Use proper event typing and prevent default behaviors when needed
- **Side Effects**: Manage side effects properly with useEffect and cleanup functions

## React Best Practices

- **Component Composition**: Favor composition over inheritance for component design
- **Single Responsibility**: Each component should have a single, well-defined purpose
- **Props Drilling**: Avoid excessive props drilling; use context or state management when needed
- **Key Props**: Always provide stable, unique keys for list items
- **Conditional Rendering**: Use proper conditional rendering patterns with logical operators
- **Form Handling**: Implement controlled components for form inputs with proper validation
- **Ref Usage**: Use useRef for DOM manipulation and useImperativeHandle sparingly
- **Effect Dependencies**: Always include all dependencies in useEffect dependency arrays

## State Management Patterns

- **Local State**: Use useState for component-specific state
- **Complex State**: Use useReducer for complex state logic with multiple sub-values
- **Global State**: Use Zustand or Context API for application-wide state
- **Server State**: Use React Query or SWR for server state management and caching
- **Form State**: Use libraries like React Hook Form for complex form state management
- **Derived State**: Avoid storing derived state; compute it during render or use useMemo

## Performance Optimization

- **Memoization**: Use React.memo for expensive components that re-render frequently
- **Callback Memoization**: Use useCallback for functions passed as props to memoized components
- **Value Memoization**: Use useMemo for expensive calculations
- **Virtual Scrolling**: Implement virtual scrolling for large lists
- **Image Optimization**: Use proper image formats and lazy loading
- **Bundle Splitting**: Split code at route level and component level when appropriate

## Examples

<example>
  // Proper React component with TypeScript and hooks
  interface UserProfileProps {
    userId: string;
    onUpdate?: (user: User) => void;
  }

  interface User {
    id: string;
    name: string;
    email: string;
    avatar?: string;
  }

  export const UserProfile: React.FC<UserProfileProps> = ({ userId, onUpdate }) => {
    const [user, setUser] = useState<User | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const fetchUser = useCallback(async () => {
      try {
        setLoading(true);
        setError(null);
        const response = await fetch(`/api/users/${userId}`);
        if (!response.ok) throw new Error('Failed to fetch user');
        const userData = await response.json();
        setUser(userData);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    }, [userId]);

    useEffect(() => {
      fetchUser();
    }, [fetchUser]);

    const handleUpdate = useCallback((updatedUser: User) => {
      setUser(updatedUser);
      onUpdate?.(updatedUser);
    }, [onUpdate]);

    if (loading) return <div className="animate-pulse">Loading...</div>;
    if (error) return <div className="text-red-600">Error: {error}</div>;
    if (!user) return <div>User not found</div>;

    return (
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex items-center space-x-4">
          {user.avatar && (
            <img 
              src={user.avatar} 
              alt={`${user.name}'s avatar`}
              className="w-16 h-16 rounded-full"
            />
          )}
          <div>
            <h2 className="text-xl font-semibold">{user.name}</h2>
            <p className="text-gray-600">{user.email}</p>
          </div>
        </div>
      </div>
    );
  };
</example>

<example type="invalid">
  // Avoid: Missing types, class components, inline styles, no error handling
  class UserProfile extends React.Component {
    constructor(props) {
      super(props);
      this.state = { user: null };
    }

    componentDidMount() {
      fetch('/api/users/' + this.props.userId)
        .then(response => response.json())
        .then(user => this.setState({ user }));
    }

    render() {
      return (
        <div style={{backgroundColor: 'white', padding: '20px'}}>
          {this.state.user ? (
            <div>
              <h2>{this.state.user.name}</h2>
              <p>{this.state.user.email}</p>
            </div>
          ) : (
            <div>Loading...</div>
          )}
        </div>
      );
    }
  }
</example>
