---
description:
globs:
alwaysApply: false
---
# QA/Testing Agent

## Critical Testing Rules

- **Test Coverage**: Maintain minimum 80% code coverage for critical business logic
- **Test Pyramid**: Follow the test pyramid (unit tests > integration tests > E2E tests)
- **Test Isolation**: Each test should be independent and not rely on other tests
- **Descriptive Names**: Use clear, descriptive test names that explain what is being tested
- **AAA Pattern**: Structure tests using Arrange, Act, Assert pattern
- **Edge Cases**: Test edge cases, error conditions, and boundary values
- **Mock External Dependencies**: Mock external APIs, databases, and third-party services
- **Test Data**: Use realistic test data that represents actual use cases
- **Cleanup**: Clean up test data and state after each test
- **Continuous Testing**: Run tests automatically on every commit and deployment

## Testing Strategy

- **Unit Tests**: Test individual functions and components in isolation
- **Integration Tests**: Test component interactions and API integrations
- **E2E Tests**: Test complete user workflows from start to finish
- **Performance Tests**: Test application performance under load
- **Accessibility Tests**: Test WCAG compliance and screen reader compatibility
- **Security Tests**: Test for common vulnerabilities (XSS, CSRF, injection attacks)
- **Visual Regression Tests**: Test UI consistency across different browsers and devices
- **API Tests**: Test API endpoints for correct responses and error handling

## React Testing Best Practices

- **React Testing Library**: Use React Testing Library for component testing
- **User-Centric Tests**: Test components from the user's perspective
- **Query Priorities**: Use getByRole, getByLabelText, getByText in order of preference
- **Async Testing**: Use waitFor, findBy queries for asynchronous operations
- **User Events**: Use userEvent library for realistic user interactions
- **Component Props**: Test components with different prop combinations
- **State Changes**: Test component state changes and side effects
- **Error Boundaries**: Test error boundary behavior and error states

## E2E Testing Standards

- **Page Object Model**: Use Page Object Model pattern for maintainable E2E tests
- **Stable Selectors**: Use data-testid attributes for stable element selection
- **Wait Strategies**: Use explicit waits instead of implicit waits or sleep
- **Test Environment**: Use dedicated test environment with controlled data
- **Browser Coverage**: Test across different browsers (Chrome, Firefox, Safari)
- **Mobile Testing**: Test responsive design on mobile devices
- **Performance Metrics**: Monitor Core Web Vitals during E2E tests

## Examples

<example>
  // Proper React component test with React Testing Library
  import { render, screen, waitFor } from '@testing-library/react';
  import userEvent from '@testing-library/user-event';
  import { UserProfile } from './UserProfile';

  const mockUser = {
    id: '1',
    name: 'John Doe',
    email: 'john@example.com',
    avatar: 'https://example.com/avatar.jpg'
  };

  // Mock fetch globally
  global.fetch = jest.fn();

  describe('UserProfile Component', () => {
    beforeEach(() => {
      jest.clearAllMocks();
    });

    it('should display user information when loaded successfully', async () => {
      // Arrange
      (fetch as jest.Mock).mockResolvedValueOnce({
        ok: true,
        json: async () => mockUser
      });

      // Act
      render(<UserProfile userId="1" />);

      // Assert
      expect(screen.getByText('Loading...')).toBeInTheDocument();
      
      await waitFor(() => {
        expect(screen.getByText('John Doe')).toBeInTheDocument();
      });
      
      expect(screen.getByText('john@example.com')).toBeInTheDocument();
      expect(screen.getByAltText("John Doe's avatar")).toBeInTheDocument();
    });

    it('should display error message when fetch fails', async () => {
      // Arrange
      (fetch as jest.Mock).mockRejectedValueOnce(new Error('Network error'));

      // Act
      render(<UserProfile userId="1" />);

      // Assert
      await waitFor(() => {
        expect(screen.getByText(/Error: Network error/)).toBeInTheDocument();
      });
    });

    it('should call onUpdate callback when user is updated', async () => {
      // Arrange
      const mockOnUpdate = jest.fn();
      (fetch as jest.Mock).mockResolvedValueOnce({
        ok: true,
        json: async () => mockUser
      });

      // Act
      render(<UserProfile userId="1" onUpdate={mockOnUpdate} />);
      
      await waitFor(() => {
        expect(screen.getByText('John Doe')).toBeInTheDocument();
      });

      // Simulate user update (this would typically be triggered by a form or button)
      const updatedUser = { ...mockUser, name: 'Jane Doe' };
      // Trigger update somehow (depends on component implementation)
      
      // Assert
      expect(mockOnUpdate).toHaveBeenCalledWith(updatedUser);
    });

    it('should handle missing avatar gracefully', async () => {
      // Arrange
      const userWithoutAvatar = { ...mockUser, avatar: undefined };
      (fetch as jest.Mock).mockResolvedValueOnce({
        ok: true,
        json: async () => userWithoutAvatar
      });

      // Act
      render(<UserProfile userId="1" />);

      // Assert
      await waitFor(() => {
        expect(screen.getByText('John Doe')).toBeInTheDocument();
      });
      
      expect(screen.queryByAltText("John Doe's avatar")).not.toBeInTheDocument();
    });
  });
</example>

<example type="invalid">
  // Avoid: Testing implementation details, no cleanup, poor assertions
  describe('UserProfile', () => {
    it('should work', () => {
      const wrapper = shallow(<UserProfile userId="1" />);
      expect(wrapper.state('loading')).toBe(true); // Testing internal state
      
      wrapper.instance().componentDidMount(); // Testing implementation details
      
      expect(wrapper.find('div').length).toBe(3); // Brittle assertion
    });
  });
</example>
