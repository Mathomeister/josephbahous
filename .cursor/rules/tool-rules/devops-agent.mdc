---
description:
globs:
alwaysApply: false
---
# DevOps Agent

## Critical DevOps Rules

- **Infrastructure as Code**: Define all infrastructure using code (Terraform, CloudFormation, etc.)
- **Automated Deployments**: Use CI/CD pipelines for consistent, automated deployments
- **Environment Parity**: Maintain consistency between development, staging, and production environments
- **Security First**: Implement security scanning, secrets management, and access controls
- **Monitoring & Alerting**: Set up comprehensive monitoring with proactive alerting
- **Backup Strategy**: Implement automated backups with tested recovery procedures
- **Rollback Capability**: Ensure quick rollback mechanisms for failed deployments
- **Resource Optimization**: Monitor and optimize resource usage for cost efficiency
- **Documentation**: Document all infrastructure, deployment processes, and runbooks
- **Compliance**: Ensure compliance with security standards and regulatory requirements

## CI/CD Pipeline Standards

- **Automated Testing**: Run all tests (unit, integration, E2E) in CI pipeline
- **Code Quality Gates**: Implement linting, security scanning, and code coverage checks
- **Build Optimization**: Optimize build times with caching and parallel execution
- **Artifact Management**: Store and version build artifacts securely
- **Environment Promotion**: Use consistent promotion process across environments
- **Deployment Strategies**: Implement blue-green, canary, or rolling deployments
- **Pipeline as Code**: Define CI/CD pipelines in version-controlled configuration files
- **Secrets Management**: Use secure secret management (GitHub Secrets, AWS Secrets Manager)

## Container & Orchestration

- **Multi-stage Builds**: Use multi-stage Docker builds for optimized images
- **Security Scanning**: Scan container images for vulnerabilities
- **Resource Limits**: Set appropriate CPU and memory limits for containers
- **Health Checks**: Implement proper health checks for container orchestration
- **Image Optimization**: Minimize image size and use distroless/alpine base images
- **Registry Security**: Use private registries with proper access controls
- **Configuration Management**: Use environment variables and config maps for configuration

## Monitoring & Observability

- **Application Metrics**: Monitor key application metrics (response time, error rate, throughput)
- **Infrastructure Metrics**: Monitor system resources (CPU, memory, disk, network)
- **Log Aggregation**: Centralize logs with structured logging and searchability
- **Distributed Tracing**: Implement tracing for microservices architectures
- **Alerting Rules**: Set up meaningful alerts with appropriate thresholds
- **Dashboard Creation**: Create informative dashboards for different stakeholders
- **SLA Monitoring**: Track and report on service level agreements

## Examples

<example>
  # Proper GitHub Actions CI/CD pipeline
  name: Web App CI/CD

  on:
    push:
      branches: [main, develop]
    pull_request:
      branches: [main]

  env:
    NODE_VERSION: '18'
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}

  jobs:
    test:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        
        - name: Setup Node.js
          uses: actions/setup-node@v4
          with:
            node-version: ${{ env.NODE_VERSION }}
            cache: 'npm'
        
        - name: Install dependencies
          run: npm ci
        
        - name: Run linting
          run: npm run lint
        
        - name: Run type checking
          run: npm run type-check
        
        - name: Run unit tests
          run: npm run test:coverage
        
        - name: Upload coverage reports
          uses: codecov/codecov-action@v3
          with:
            file: ./coverage/lcov.info
    
    security:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        
        - name: Run security audit
          run: npm audit --audit-level high
        
        - name: Run Snyk security scan
          uses: snyk/actions/node@master
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    
    build:
      needs: [test, security]
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main'
      outputs:
        image: ${{ steps.image.outputs.image }}
      steps:
        - uses: actions/checkout@v4
        
        - name: Log in to Container Registry
          uses: docker/login-action@v3
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Extract metadata
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            tags: |
              type=ref,event=branch
              type=sha,prefix={{branch}}-
        
        - name: Build and push Docker image
          uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
        
        - name: Output image
          id: image
          run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
    
    deploy:
      needs: build
      runs-on: ubuntu-latest
      environment: production
      steps:
        - name: Deploy to production
          run: |
            echo "Deploying ${{ needs.build.outputs.image }} to production"
            # Add actual deployment commands here
</example>

<example type="invalid">
  # Avoid: No testing, hardcoded secrets, no security scanning
  name: Bad Pipeline
  
  on:
    push:
      branches: [main]
  
  jobs:
    deploy:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: Deploy
          run: |
            docker build -t myapp .
            docker run -e DATABASE_PASSWORD=hardcoded123 myapp
            # No testing, no security, hardcoded secrets!
</example>
