---
description: 
globs: 
alwaysApply: false
---
# Web Development Cursor Rules Format

## Template Structure for Rules Files

```mdc
---
description: `Comprehensive description that provides full context and clearly indicates when this rule should be applied. Include key scenarios, impacted areas, and why following this rule is important for web development. While being thorough, remain focused and relevant. The description should be detailed enough that the agent can confidently determine whether to apply the rule in any given situation.`
globs: src/**/*.tsx, src/**/*.ts OR blank
alwaysApply: {true or false}
---

# Rule Title

## Critical Rules

- Concise, bulleted list of actionable rules the agent MUST follow for web development

## Examples

<example>
{valid rule application for web development}
</example>

<example type="invalid">
{invalid rule application for web development}
</example>
```

## Web Development Organizational Folders

All rules files will be under these organizational folders:
- `.cursor/rules/core-rules` - rules related to cursor agent behavior or rule generation specifically
- `.cursor/rules/global-rules` - rules that are ALWAYS applied to every chat and cmd/ctrl-k context
- `.cursor/rules/ts-rules` - TypeScript and JavaScript specific rules
- `.cursor/rules/ui-rules` - rules about React, HTML, CSS, Tailwind CSS, component architecture
- `.cursor/rules/testing-rules` - rules about Jest, React Testing Library, E2E testing, Playwright
- `.cursor/rules/tool-rules` - rules specific to different tools (Git, ESLint, Prettier, Vite, etc.)

## Web Development Glob Pattern Examples

Common glob patterns for web development:
- TypeScript/JavaScript: `*.ts, *.tsx, *.js, *.jsx`
- React components: `src/components/**/*.tsx, src/pages/**/*.tsx`
- Styles: `*.css, *.scss, *.module.css`
- Tests: `*.test.ts, *.test.tsx, *.spec.ts, **/__tests__/**/*`
- Config files: `*.config.js, *.config.ts, vite.config.ts, tailwind.config.js`
- Documentation: `*.md, docs/**/*.md`
- Build output: `dist/**/*.*, build/**/*.*`

## Critical Web Development Rules

- Rule files will be located and named ALWAYS as: `.cursor/rules/{organizational-folder}/rule-name-{auto|agent|manual|always}.mdc`
- Rules will NEVER be created anywhere other than `.cursor/rules/**`
- You will always check to see if there is an existing rule to update under all `.cursor/rules` sub-folders
- FrontMatter Rules Types:
  - **Manual Rule**: description and globs MUST be blank, alwaysApply: false, filename ends with `-manual.mdc`
  - **Auto Rule**: description must be blank, alwaysApply: false, filename ends with `-auto.mdc`
  - **Always Rule**: description and globs blank, alwaysApply: true, filename ends with `-always.mdc`
  - **Agent Select Rule**: comprehensive description required, globs blank, alwaysApply: false, filename ends with `-agent.mdc`

## Web Development Specific Guidelines

- Focus on modern web development practices (React 18+, TypeScript 5+, Tailwind CSS 3+)
- Emphasize component-based architecture and reusability
- Include accessibility (a11y) considerations in UI rules
- Prioritize performance optimization patterns
- Ensure responsive design principles
- Follow semantic HTML and CSS best practices
- Include error handling and loading states for components
- Emphasize type safety and proper TypeScript usage
- Include proper testing strategies (unit, integration, E2E)

## Rule Content Guidelines

- Focus on actionable, clear directives without unnecessary explanation
- When a rule will only be used sometimes (alwaysApply: false) the description MUST provide enough context for the AI to confidently determine when to load and apply the rule
- Use concise Markdown tailored to agent context window usage
- Always indent content within XML Example section with 2 spaces
- Emojis and Mermaid diagrams are allowed and encouraged if they better explain the rule for AI comprehension
- Always include a valid and invalid example relevant to web development
- NEVER use quotes around glob patterns, NEVER group glob extensions with `{}`
- If the request includes context of a mistake made, use it in the example for the rule
- After rule is created or updated, respond with:
  - AutoRuleGen Success: path/rule-name.mdc
  - Rule Type: {Rule Type}
  - Rule Description: {The exact content of the description field}
